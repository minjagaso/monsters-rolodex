{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,YAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,8BAAyBH,EAAMI,QAAQC,GAAvC,mBACtB,6BAAKL,EAAMI,QAAQE,OACnB,4CAAeN,EAAMI,QAAQG,cCH5BC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACMD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,UCLrEM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACrC,OACI,uBAAOC,KAAK,SAASb,UAAU,SAASW,YAAaA,EAAaG,SAAUF,MCoCrEG,G,wDAnCX,aAAe,IAAD,8BACV,gBAcJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IAJP,E,gEASO,IAAD,OAChBI,MAAM,wCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,+BAOnC,IAAD,EAC6BC,KAAKN,MAA/Bb,EADH,EACGA,SAAUU,EADb,EACaA,YAEZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpD,OACI,sBAAK9B,UAAU,MAAf,UACI,mDAAuB2B,KAAKN,MAAMH,YAAlC,OACA,cAAC,EAAD,CAAWP,YAAY,qBAAqBC,aAAee,KAAKf,eAChE,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BlBI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e82a4796.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`http://robohash.org/${props.monster.id}?size=180x180`} />\r\n            <h3>{props.monster.name}</h3>\r\n            <small>Email: {props.monster.email}</small>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './card-list.styles.css';\r\n\r\nimport { Card } from '../card/card.component.jsx';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            { props.monsters.map( monster => <Card monster={monster} key={monster.id} /> ) }\r\n        </div>\r\n        \r\n    )\r\n}","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n    return (\r\n        <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n    )\r\n}","import { Component } from 'react';\r\nimport { CardList } from './components/card-list/card-list.component.jsx';\r\nimport { SearchBox } from './components/search-box/search-box.component.jsx';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            monsters: [],\r\n            searchField: ''\r\n        };\r\n        // this.handleChange = this.handleChange.bind(this);\r\n        // Lexical binding scope using arrow keys can remove need for this\r\n    }\r\n    componentDidMount() {\r\n        fetch('//jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ monsters: users }))\r\n    }\r\n    // handleChange(e) {\r\n    handleChange = (e) => {\r\n        this.setState({ searchField: e.target.value })\r\n    }\r\n\r\n    render() {\r\n        const { monsters, searchField } = this.state;\r\n        // equivalent to const monster = this.state.monsters\r\n        const filteredMonsters = monsters.filter(monster => \r\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Monsters, Inc. - { this.state.searchField} </h1>\r\n                <SearchBox placeholder=\"Search monsters...\" handleChange={ this.handleChange } />\r\n                <CardList monsters={filteredMonsters}></CardList>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}